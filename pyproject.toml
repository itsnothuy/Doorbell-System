[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "doorbell-security-system"
version = "1.0.0"
description = "AI-powered doorbell security system with face recognition and smart notifications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "itsnothuy", email = "your-email@example.com"}
]
maintainers = [
    {name = "itsnothuy", email = "your-email@example.com"}
]
keywords = [
    "doorbell", "security", "face-recognition", "ai", "raspberry-pi", 
    "home-automation", "surveillance", "computer-vision"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Multimedia :: Video :: Capture",
]
requires-python = ">=3.10"
dependencies = [
    "face_recognition>=1.3.0",
    "opencv-python>=4.8.0",
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    "requests>=2.31.0",
    "python-dateutil>=2.8.0",
    "pyyaml>=6.0.0",
    "python-telegram-bot>=20.6",
    "flask>=2.3.0",
    "flask-cors>=4.0.0",
    "gunicorn>=21.0.0",
    "schedule>=1.2.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "types-requests>=2.31.0",
    "types-Pillow>=10.0.0",
    "types-PyYAML>=6.0.0",
    "types-python-dateutil>=2.8.0",
    "pre-commit>=3.4.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "isort>=5.12.0",
]

# Raspberry Pi specific dependencies
pi = [
    "RPi.GPIO>=0.7.1",
    "picamera2>=0.3.12",
]

# Performance monitoring
monitoring = [
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]

# Production monitoring and observability
production = [
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "python-json-logger>=2.0.7",
    "gunicorn>=21.2.0",
    "gevent>=24.2.1",
    "cryptography>=42.0.0",
    "ujson>=5.9.0",
    "python-dotenv>=1.0.0",
    "opentelemetry-api>=1.22.0",
    "opentelemetry-sdk>=1.22.0",
    "opentelemetry-exporter-jaeger>=1.22.0",
    "opentelemetry-instrumentation>=0.43b0",
]

# Testing utilities
testing = [
    "requests-mock>=1.11.0",
    "responses>=0.23.0",
    "factory-boy>=3.3.0",
    "faker>=19.6.0",
    "freezegun>=1.2.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
    "pymdown-extensions>=10.3.0",
]

# All extras combined
all = [
    "doorbell-security-system[dev,pi,monitoring,production,testing,docs]"
]

[project.urls]
Homepage = "https://github.com/itsnothuy/doorbell-system"
Repository = "https://github.com/itsnothuy/doorbell-system.git"
Issues = "https://github.com/itsnothuy/doorbell-system/issues"
Documentation = "https://github.com/itsnothuy/doorbell-system/blob/master/README.md"
Changelog = "https://github.com/itsnothuy/doorbell-system/blob/master/CHANGELOG.md"

[project.scripts]
doorbell-security = "src.doorbell_security:main"

# Tool configurations
[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]
exclude = ["tests*", "docs*", "*.egg-info*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | venv
  | __pycache__
)/
'''

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "config", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "data",
    "static",
    "templates",
]

[tool.ruff.lint]
# Enable specific rule sets
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # line too long (handled by black)
    "B008",   # do not perform function calls in argument defaults
    "B006",   # do not use mutable data structures for argument defaults
    "C901",   # function is too complex
    "SIM102", # use a single if-statement
    "SIM108", # use ternary operator
    "PTH123", # use pathlib instead of os.path.join
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and print statements
"tests/**/*" = ["PLR2004", "S101", "T201"]
# Scripts can use print statements and exit calls
"scripts/**/*" = ["T201", "S603", "S607"]
# Configuration files can have complex logic
"config/**/*" = ["C901"]

[tool.ruff.lint.isort]
force-single-line = false
known-first-party = ["src", "config"]
known-third-party = [
    "face_recognition", "cv2", "PIL", "numpy", "requests", 
    "flask", "telegram", "schedule", "yaml"
]

[tool.ruff.lint.mccabe]
max-complexity = 10

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Paths
files = ["src", "config", "app.py"]
exclude = [
    "build/",
    "dist/",
    "tests/",
    "data/",
    "venv/",
    "__pycache__/",
]

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "face_recognition.*",
    "cv2.*", 
    "RPi.*",
    "picamera2.*",
    "schedule.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_untyped_calls = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=config", 
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--tb=short",
]
testpaths = ["tests"]
pythonpath = ["."]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "hardware: marks tests that require hardware (Raspberry Pi)",
    "network: marks tests that require network access",
    "gpu: marks tests that require GPU acceleration",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src", "config"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "# pragma: no cover",
    "# nocov",
    "TYPE_CHECKING",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist"]
skips = [
    "B101",  # assert_used
    "B601",  # paramiko_calls (if we add SSH functionality)
]

[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests.py"]

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "config", "tests"]
known_first_party = ["src", "config"]
known_third_party = [
    "face_recognition", "cv2", "PIL", "numpy", "requests",
    "flask", "telegram", "schedule", "yaml", "pytest"
]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]