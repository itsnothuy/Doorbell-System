name: "CodeQL Security Analysis"

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run CodeQL analysis every Monday at 6 AM UTC
    - cron: '0 6 * * 1'

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: "CodeQL Analysis"
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
        # CodeQL supports 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby'
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          
          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          queries: +security-extended,security-and-quality

      # Set up Python environment for better analysis
      - name: Set up Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        if: matrix.language == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-web.txt

      # Set up Node.js for JavaScript analysis
      - name: Set up Node.js
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'static/package-lock.json'

      - name: Install JavaScript dependencies
        if: matrix.language == 'javascript'
        run: |
          if [ -f "static/package.json" ]; then
            cd static && npm ci
          fi

      # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
      # If this step fails, then you should remove it and run the build manually
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"
          upload: true
          # Optionally add SARIF file upload for custom processing
          output: sarif-results
          
      - name: Upload SARIF results as artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: codeql-sarif-${{ matrix.language }}
          path: sarif-results/${{ matrix.language }}.sarif

  # Additional security scanning with multiple tools
  security-scan:
    name: "Extended Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety semgrep
          
          # Install Trivy for additional vulnerability scanning
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Bandit security linter
        run: |
          echo "Running Bandit security analysis..."
          bandit -r src/ config/ app.py \
            -f json -o bandit-report.json \
            --skip B101,B601  # Skip assert and shell injection for now
          bandit -r src/ config/ app.py -f txt
        continue-on-error: true

      - name: Run Safety for dependency vulnerabilities
        run: |
          echo "Checking for known security vulnerabilities in dependencies..."
          pip install -r requirements-web.txt
          safety check --json --output safety-report.json --continue-on-error
          safety check --continue-on-error
        continue-on-error: true

      - name: Run Semgrep for additional security patterns
        run: |
          echo "Running Semgrep security analysis..."
          semgrep --config=auto --json --output=semgrep-report.json src/ config/ app.py
          semgrep --config=auto src/ config/ app.py
        continue-on-error: true

      - name: Scan filesystem for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json --output trufflehog-report.json
        continue-on-error: true

      - name: Trivy filesystem scan
        run: |
          echo "Running Trivy filesystem scan..."
          trivy fs --security-checks vuln,secret,config \
            --format json --output trivy-fs-report.json .
          trivy fs --security-checks vuln,secret,config .
        continue-on-error: true

      - name: Aggregate security reports
        if: always()
        run: |
          echo "## 🔒 Security Scan Summary" >> security-summary.md
          echo "" >> security-summary.md
          
          # Count issues from each tool
          bandit_issues=$(jq -r '.results | length' bandit-report.json 2>/dev/null || echo "0")
          safety_issues=$(jq -r '. | length' safety-report.json 2>/dev/null || echo "0")
          semgrep_issues=$(jq -r '.results | length' semgrep-report.json 2>/dev/null || echo "0")
          trivy_issues=$(jq -r '.Results[]?.Vulnerabilities | length' trivy-fs-report.json 2>/dev/null || echo "0")
          
          echo "| Tool | Issues Found |" >> security-summary.md
          echo "|------|--------------|" >> security-summary.md
          echo "| Bandit | $bandit_issues |" >> security-summary.md
          echo "| Safety | $safety_issues |" >> security-summary.md
          echo "| Semgrep | $semgrep_issues |" >> security-summary.md
          echo "| Trivy | $trivy_issues |" >> security-summary.md
          echo "" >> security-summary.md
          
          total_issues=$((bandit_issues + safety_issues + semgrep_issues + trivy_issues))
          
          if [ $total_issues -eq 0 ]; then
            echo "✅ **No security issues found!**" >> security-summary.md
          elif [ $total_issues -lt 5 ]; then
            echo "⚠️ **$total_issues security issues found - please review**" >> security-summary.md
          else
            echo "❌ **$total_issues security issues found - immediate attention required**" >> security-summary.md
          fi
          
          cat security-summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json
            trivy-fs-report.json
            trufflehog-report.json
            security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Could not read security summary:', error);
            }

  # Dependency review for pull requests
  dependency-review:
    name: "Dependency Review"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0
          comment-summary-in-pr: true