name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop, 'copilot/**' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Quality gates and linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort
    
    - name: Run Black
      run: black --check src config tests
    
    - name: Run Ruff
      run: ruff check src config tests
    
    - name: Run isort
      run: isort --check-only src config tests

  # Unit tests with multiple Python versions
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing]'
    
    - name: Run unit tests
      run: |
        pytest tests/ -m unit -v --tb=short --cov=src --cov=config --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: unit-${{ matrix.python-version }}

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing]'
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --cov=src --cov=config --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: integration-tests

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing]'
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v --tb=short --cov=src --cov=config --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: e2e-tests

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing,monitoring]'
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short --benchmark-only

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing]'
        pip install bandit safety
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v -m security --tb=short
    
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Coverage report
  coverage-report:
    name: Generate Coverage Report
    needs: [unit-tests, integration-tests, e2e-tests]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev python3-opencv
    
    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[dev,testing]'
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov=config --cov-report=html --cov-report=xml --cov-report=json
    
    - name: Check coverage threshold
      run: |
        python scripts/testing/generate_coverage_report.py --fail-under 80
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
          coverage.json
    
    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: all-tests

  # Quality gates
  quality-gates:
    name: Quality Gates
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, security-tests]
    runs-on: ubuntu-latest
    
    steps:
    - name: Check all tests passed
      run: echo "âœ… All quality gates passed!"
